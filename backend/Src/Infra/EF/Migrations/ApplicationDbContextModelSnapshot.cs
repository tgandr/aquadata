// <auto-generated />
using System;
using System.Collections.Generic;
using Aquadata.Infra.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aquadata.Infra.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Aquadata.Core.Entities.Biometric.BiometricEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("AverageWeight")
                        .HasColumnType("float");

                    b.Property<float>("Count")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("HarverstId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CultivationId");

                    b.HasIndex("HarverstId");

                    b.ToTable("Biometrics", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Cultivation.CultivationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PLOrigin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PondId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PondNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Uniformity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WaterAndAcclimationChecked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PondId");

                    b.ToTable("Cultivations", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Employee.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.EmployeePayment.EmployeePaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("FinancialId");

                    b.ToTable("EmployeePayments", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Expense.CostPerPondEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PondId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("PondId");

                    b.ToTable("CostPerPond", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Expense.ExpenseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialId");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Feed.FeedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("HadLeftovers")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReducedOrSuspended")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("TotalOfDay")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CultivationId");

                    b.ToTable("Feeds", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Fertilizer.FertilizerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MeasureUnit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CultivationId");

                    b.ToTable("Fertilizers", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Financial.FinancialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Financials", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Harvest.HarvestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("BioMass")
                        .HasColumnType("float");

                    b.Property<string>("Buyer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsTotal")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CultivationId");

                    b.ToTable("Harvests", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Inventory.InventoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AmountInvested")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("FinalValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateOnly>("InOperationSince")
                        .HasColumnType("date");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UsefulLifeInYears")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Inventories", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Objective.ObjectiveEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("AverageSize")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<float>("SurvivalRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CultivationId")
                        .IsUnique();

                    b.ToTable("Objectives", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Payment.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdenticiationType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Pond.PondEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ponds", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.FeedPurchaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("BagSize")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RationType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Validity")
                        .HasColumnType("date");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialId");

                    b.ToTable("FeedPurchases", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.FertilizerPurchaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialId");

                    b.ToTable("FertilizerPurchases", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.GenericPurchaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialId");

                    b.ToTable("GenericPurchases", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.PostLarvaePurchaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CultivationId")
                        .IsUnique();

                    b.HasIndex("FinancialId");

                    b.ToTable("PostLarvaePurchases", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.ProbioticsPurchaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FinancialId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialId");

                    b.ToTable("ProbioticsPurchases", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Stock.StockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplyType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.StressTest.StressTestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DeadLarvae")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StressType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SwimmingResponse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CultivationId")
                        .IsUnique();

                    b.ToTable("StressTests", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Subscription.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarmAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Water.WaterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("DissolvedOxygen")
                        .HasColumnType("float");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmmonia")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.ComplexProperty<Dictionary<string, object>>("PH", "Aquadata.Core.Entities.Water.WaterEntity.PH#PH", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<byte>("Value")
                                .HasColumnType("tinyint unsigned");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CultivationId");

                    b.ToTable("Waters", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.WaterAndAcclimation.WaterAndAcclimationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("Ammonia")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultivationId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Nitrite")
                        .HasColumnType("float");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Oxygen")
                        .HasColumnType("float");

                    b.Property<int>("Salinity")
                        .HasColumnType("int");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.ComplexProperty<Dictionary<string, object>>("PH", "Aquadata.Core.Entities.WaterAndAcclimation.WaterAndAcclimationEntity.PH#PH", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<byte>("Value")
                                .HasColumnType("tinyint unsigned");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CultivationId");

                    b.ToTable("WaterAndAcclimations", (string)null);
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Biometric.BiometricEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithMany("Biometrics")
                        .HasForeignKey("CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aquadata.Core.Entities.Harvest.HarvestEntity", null)
                        .WithMany("Biometrics")
                        .HasForeignKey("HarverstId");
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Cultivation.CultivationEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Pond.PondEntity", null)
                        .WithMany("Cultivations")
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Employee.EmployeeEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("Employees")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.EmployeePayment.EmployeePaymentEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Employee.EmployeeEntity", null)
                        .WithOne()
                        .HasForeignKey("Aquadata.Core.Entities.EmployeePayment.EmployeePaymentEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("Payroll")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Expense.CostPerPondEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Expense.ExpenseEntity", null)
                        .WithMany("CostsPerPond")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aquadata.Core.Entities.Pond.PondEntity", null)
                        .WithMany()
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Expense.ExpenseEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("Expenses")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Feed.FeedEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithMany("Feed")
                        .HasForeignKey("CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Fertilizer.FertilizerEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithMany("Fertilizers")
                        .HasForeignKey("CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Financial.FinancialEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.User.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("Aquadata.Core.Entities.Financial.FinancialEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Harvest.HarvestEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithMany("Harvests")
                        .HasForeignKey("CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Inventory.InventoryEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Objective.ObjectiveEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithOne("Objective")
                        .HasForeignKey("Aquadata.Core.Entities.Objective.ObjectiveEntity", "CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Payment.PaymentEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.User.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("Aquadata.Core.Entities.Payment.PaymentEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Pond.PondEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.FeedPurchaseEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("FeedPurchases")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.FertilizerPurchaseEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("FertilizerPurchases")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.GenericPurchaseEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("GenericPurchases")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.PostLarvaePurchaseEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithOne()
                        .HasForeignKey("Aquadata.Core.Entities.Purchase.PostLarvaePurchaseEntity", "CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("PLPurchases")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Purchase.ProbioticsPurchaseEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Financial.FinancialEntity", null)
                        .WithMany("ProbioticPurchases")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Stock.StockEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.StressTest.StressTestEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithOne("StressTest")
                        .HasForeignKey("Aquadata.Core.Entities.StressTest.StressTestEntity", "CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Subscription.SubscriptionEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.User.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("Aquadata.Core.Entities.Subscription.SubscriptionEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Water.WaterEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithMany("WaterParams")
                        .HasForeignKey("CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.WaterAndAcclimation.WaterAndAcclimationEntity", b =>
                {
                    b.HasOne("Aquadata.Core.Entities.Cultivation.CultivationEntity", null)
                        .WithMany("WaterAndAcclimation")
                        .HasForeignKey("CultivationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Cultivation.CultivationEntity", b =>
                {
                    b.Navigation("Biometrics");

                    b.Navigation("Feed");

                    b.Navigation("Fertilizers");

                    b.Navigation("Harvests");

                    b.Navigation("Objective");

                    b.Navigation("StressTest");

                    b.Navigation("WaterAndAcclimation");

                    b.Navigation("WaterParams");
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Expense.ExpenseEntity", b =>
                {
                    b.Navigation("CostsPerPond");
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Financial.FinancialEntity", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Expenses");

                    b.Navigation("FeedPurchases");

                    b.Navigation("FertilizerPurchases");

                    b.Navigation("GenericPurchases");

                    b.Navigation("PLPurchases");

                    b.Navigation("Payroll");

                    b.Navigation("ProbioticPurchases");
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Harvest.HarvestEntity", b =>
                {
                    b.Navigation("Biometrics");
                });

            modelBuilder.Entity("Aquadata.Core.Entities.Pond.PondEntity", b =>
                {
                    b.Navigation("Cultivations");
                });
#pragma warning restore 612, 618
        }
    }
}
